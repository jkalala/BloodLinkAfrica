apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded secrets
  postgres-password: Qmxvb2RMaW5rUGFzc3dvcmQyMDI0IQ==  # BloodLinkPassword2024!
  postgres-user: Ymxvb2RsaW5r  # bloodlink
  postgres-db: Ymxvb2RsaW5rX3Byb2R1Y3Rpb24=  # bloodlink_production
  replication-password: UmVwbGljYXRpb25QYXNzd29yZDIwMjQh  # ReplicationPassword2024!
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
data:
  postgresql.conf: |
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL settings
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_segments = 32
    
    # Checkpoint settings
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 10min
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # Performance
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Security
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'
    
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             10.0.0.0/8              md5
    host    replication     replicator      10.0.0.0/8              md5
    
  init-db.sql: |
    -- Create application database
    CREATE DATABASE bloodlink_production;
    
    -- Create application user
    CREATE USER bloodlink WITH ENCRYPTED PASSWORD 'BloodLinkPassword2024!';
    
    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE bloodlink_production TO bloodlink;
    
    -- Create replication user
    CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'ReplicationPassword2024!';
    
    -- Connect to application database
    \c bloodlink_production;
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Grant schema privileges
    GRANT ALL ON SCHEMA public TO bloodlink;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO bloodlink;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO bloodlink;
    
    -- Set default privileges
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO bloodlink;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO bloodlink;
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-encrypted
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
    version: "14.9"
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      component: database
  template:
    metadata:
      labels:
        app: postgres
        component: database
        environment: production
        version: "14.9"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: bloodlink-production-sa
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:14.9-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
          readOnly: true
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: postgres-ssl
          mountPath: /etc/ssl/certs
          readOnly: true
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.12.0
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-db
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
          items:
          - key: postgresql.conf
            path: postgresql.conf
          - key: pg_hba.conf
            path: pg_hba.conf
      - name: postgres-init
        configMap:
          name: postgres-config
          items:
          - key: init-db.sql
            path: init-db.sql
      - name: postgres-ssl
        secret:
          secretName: postgres-ssl-secret
          defaultMode: 0600
      nodeSelector:
        kubernetes.io/os: linux
        node-type: database
      tolerations:
      - key: "database"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgres
        component: database
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: gp3-encrypted
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app: postgres
    component: database
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app: postgres
    component: database
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: bloodlink-production
  labels:
    app: postgres
    component: database
    environment: production
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: postgres-backup
            component: database
        spec:
          serviceAccountName: bloodlink-production-sa
          containers:
          - name: postgres-backup
            image: postgres:14.9-alpine
            command:
            - /bin/sh
            - -c
            - |
              BACKUP_FILE="/backups/bloodlink-$(date +%Y%m%d-%H%M%S).sql"
              pg_dump -h postgres-service -U $POSTGRES_USER -d $POSTGRES_DB > $BACKUP_FILE
              gzip $BACKUP_FILE
              echo "Backup completed: $BACKUP_FILE.gz"
              
              # Keep only last 7 days of backups
              find /backups -name "*.gz" -mtime +7 -delete
            env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-db
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 1Gi
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-backup-pvc
          restartPolicy: OnFailure
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: bloodlink-production
  labels:
    app: postgres-backup
    component: database
    environment: production
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3-encrypted
  resources:
    requests:
      storage: 50Gi

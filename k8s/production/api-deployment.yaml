apiVersion: apps/v1
kind: Deployment
metadata:
  name: bloodlink-api
  namespace: bloodlink-production
  labels:
    app: bloodlink-api
    component: backend
    environment: production
    version: v2.0.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "BloodLink Africa API Server"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: bloodlink-api
      component: backend
  template:
    metadata:
      labels:
        app: bloodlink-api
        component: backend
        environment: production
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: bloodlink-production-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: bloodlink-api
        image: bloodlink/api:v2.0.0
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: encryption-key
        - name: EMAIL_API_KEY
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: email-api-key
        - name: SMS_API_KEY
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: sms-api-key
        - name: CLOUDINARY_URL
          valueFrom:
            secretKeyRef:
              name: bloodlink-secrets
              key: cloudinary-url
        - name: MONITORING_ENABLED
          value: "true"
        - name: SECURITY_ENABLED
          value: "true"
        - name: HIPAA_COMPLIANCE
          value: "true"
        - name: AUDIT_LOGGING
          value: "true"
        - name: PERFORMANCE_MONITORING
          value: "true"
        envFrom:
        - configMapRef:
            name: bloodlink-config
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
        - name: config
          mountPath: /app/config
          readOnly: true
      - name: log-shipper
        image: fluent/fluent-bit:2.0
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: logs
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: uploads
        persistentVolumeClaim:
          claimName: bloodlink-uploads-pvc
      - name: config
        configMap:
          name: bloodlink-config
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      nodeSelector:
        kubernetes.io/os: linux
        node-type: application
      tolerations:
      - key: "application"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bloodlink-api
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: bloodlink-api-service
  namespace: bloodlink-production
  labels:
    app: bloodlink-api
    component: backend
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: bloodlink-api
    component: backend
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: bloodlink-api-headless
  namespace: bloodlink-production
  labels:
    app: bloodlink-api
    component: backend
    environment: production
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: bloodlink-api
    component: backend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: bloodlink-api-hpa
  namespace: bloodlink-production
  labels:
    app: bloodlink-api
    component: backend
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: bloodlink-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: bloodlink-api-pdb
  namespace: bloodlink-production
  labels:
    app: bloodlink-api
    component: backend
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: bloodlink-api
      component: backend

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  security-scan:
    name: Automated Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better secret detection
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run TypeScript check
      run: npx tsc --noEmit
      continue-on-error: true

    - name: Run security scan script
      run: |
        cd BloodConnectv0
        chmod +x scripts/security-scan.sh
        ./scripts/security-scan.sh
      continue-on-error: true

    - name: Run dependency audit
      run: |
        cd BloodConnectv0
        pnpm audit --audit-level high
      continue-on-error: true

    - name: Install and run ESLint security plugin
      run: |
        cd BloodConnectv0
        npx eslint . --ext .ts,.tsx,.js,.jsx --config .eslintrc.json --max-warnings 0
      continue-on-error: true

    - name: Scan for secrets with GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true

    - name: Run Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
        generateSarif: "1"
      continue-on-error: true

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

    - name: Check for hardcoded secrets
      run: |
        cd BloodConnectv0
        echo "Scanning for potential secrets..."
        
        # Common secret patterns
        if grep -r "sk_[a-zA-Z0-9]\{48\}" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "‚ö†Ô∏è Found potential Stripe secret key"
          exit 1
        fi
        
        if grep -r "AIza[0-9A-Za-z\\-_]\{35\}" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "‚ö†Ô∏è Found potential Google API key"
          exit 1
        fi
        
        if grep -r -i "password.*=.*['\"][^'\"]\{8,\}['\"]" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "‚ö†Ô∏è Found potential hardcoded password"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded secrets detected"
      continue-on-error: true

    - name: Check for insecure HTTP URLs
      run: |
        cd BloodConnectv0
        echo "Scanning for insecure HTTP URLs..."
        
        if grep -r "http://" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
          echo "‚ö†Ô∏è Found insecure HTTP URLs"
          exit 1
        fi
        
        echo "‚úÖ No insecure HTTP URLs found"
      continue-on-error: true

    - name: Analyze bundle for security issues
      run: |
        cd BloodConnectv0
        echo "Building and analyzing bundle..."
        
        # Build the application
        npm run build
        
        # Check bundle size (security concern if too large)
        BUNDLE_SIZE=$(du -sh .next | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        
        # Check for source maps in production (potential info disclosure)
        if find .next -name "*.map" | head -1 > /dev/null; then
          echo "‚ö†Ô∏è Source maps found in production build"
        else
          echo "‚úÖ No source maps in production build"
        fi
      continue-on-error: true

    - name: Check security headers configuration
      run: |
        cd BloodConnectv0
        echo "Checking security headers configuration..."
        
        # Check if security headers are configured in next.config.mjs
        if grep -q "X-Frame-Options\|Content-Security-Policy\|Strict-Transport-Security" next.config.mjs; then
          echo "‚úÖ Security headers found in configuration"
        else
          echo "‚ö†Ô∏è Security headers not configured"
        fi
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          BloodConnectv0/security-scan-results/
          semgrep.sarif
        retention-days: 30

    - name: Create security report comment (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './BloodConnectv0/security-scan-results';
          
          if (fs.existsSync(path)) {
            const files = fs.readdirSync(path);
            const reportFile = files.find(f => f.startsWith('security_scan_'));
            
            if (reportFile) {
              const reportPath = `${path}/${reportFile}`;
              const reportContent = fs.readFileSync(reportPath, 'utf8');
              
              const body = `## üîí Security Scan Results
              
              A security scan has been completed for this PR. Please review the results below:
              
              \`\`\`
              ${reportContent.slice(0, 5000)}${reportContent.length > 5000 ? '\n... (truncated)' : ''}
              \`\`\`
              
              üìÅ Full report available in the workflow artifacts.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
          }
      continue-on-error: true

    - name: Fail on critical security issues
      run: |
        cd BloodConnectv0
        
        # Check if security scan found critical issues
        if [ -d "security-scan-results" ]; then
          LATEST_REPORT=$(ls -t security-scan-results/security_scan_*.md | head -1)
          if [ -f "$LATEST_REPORT" ]; then
            if grep -q "Critical.*[1-9]" "$LATEST_REPORT"; then
              echo "‚ùå Critical security issues found - failing build"
              cat "$LATEST_REPORT"
              exit 1
            fi
          fi
        fi
        
        echo "‚úÖ No critical security issues found"

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: security-scan
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
    - name: Send security alert
      uses: actions/github-script@v6
      with:
        script: |
          // Create an issue for security team notification
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Security Scan Alert - ${new Date().toISOString().split('T')[0]}`,
            body: `## Security Scan Alert
            
            **Alert Time**: ${new Date().toISOString()}
            **Branch**: ${context.ref}
            **Workflow**: ${context.workflow}
            **Run ID**: ${context.runId}
            
            A security scan has detected potential issues that require immediate attention.
            
            ### Action Required
            - [ ] Review the security scan results
            - [ ] Assess the severity of detected issues
            - [ ] Implement necessary fixes
            - [ ] Re-run security scan to verify fixes
            
            ### Links
            - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Security Scan Results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            **Priority**: ${context.ref === 'refs/heads/main' ? 'HIGH' : 'MEDIUM'}
            `,
            labels: ['security', 'urgent', 'automated-alert']
          });
          
          console.log(`Created security alert issue: ${issue.data.number}`);
      continue-on-error: true
"use client"

import React, { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import { Switch } from "@/components/ui/switch"
import { 
  Heart, 
  MapPin, 
  Clock, 
  Phone, 
  AlertTriangle,
  Users,
  Building,
  Calendar,
  Send,
  Loader2,
  CheckCircle,
  XCircle,
  Wifi,
  WifiOff
} from "lucide-react"
import { useEnhancedAuth } from "@/contexts/enhanced-auth-context"
import { getOfflineSyncService } from "@/lib/offline-sync-service"
import { getPushNotificationService } from "@/lib/push-notification-service"
import { toast } from "@/hooks/use-toast"
import { cn } from "@/lib/utils"

interface BloodRequestFormData {
  bloodType: string
  urgencyLevel: 'low' | 'medium' | 'high' | 'critical'
  unitsNeeded: number
  patientName: string
  hospitalName: string
  location: string
  contactPhone: string
  additionalNotes: string
  allowSharing: boolean
  sendNotifications: boolean
}

const BLOOD_TYPES = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-']
const URGENCY_LEVELS = [
  { value: 'low', label: 'Low', color: 'bg-green-100 text-green-800', description: 'Planned procedure' },
  { value: 'medium', label: 'Medium', color: 'bg-yellow-100 text-yellow-800', description: 'Within 24 hours' },
  { value: 'high', label: 'High', color: 'bg-orange-100 text-orange-800', description: 'Within 6 hours' },
  { value: 'critical', label: 'Critical', color: 'bg-red-100 text-red-800', description: 'Immediate need' }
]

export function MobileBloodRequestForm() {
  const { user } = useEnhancedAuth()
  const [formData, setFormData] = useState<BloodRequestFormData>({
    bloodType: '',
    urgencyLevel: 'medium',
    unitsNeeded: 1,
    patientName: '',
    hospitalName: '',
    location: user?.location || '',
    contactPhone: user?.phone || '',
    additionalNotes: '',
    allowSharing: true,
    sendNotifications: true
  })
  
  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [currentStep, setCurrentStep] = useState(1)\n  const [isOnline, setIsOnline] = useState(navigator.onLine)\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})\n\n  const totalSteps = 4\n  const progress = (currentStep / totalSteps) * 100\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true)\n    const handleOffline = () => setIsOnline(false)\n    \n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n    \n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n\n  const validateStep = (step: number): boolean => {\n    const errors: Record<string, string> = {}\n    \n    switch (step) {\n      case 1:\n        if (!formData.bloodType) errors.bloodType = 'Blood type is required'\n        if (!formData.urgencyLevel) errors.urgencyLevel = 'Urgency level is required'\n        if (formData.unitsNeeded < 1) errors.unitsNeeded = 'At least 1 unit is required'\n        break\n      case 2:\n        if (!formData.patientName.trim()) errors.patientName = 'Patient name is required'\n        if (!formData.hospitalName.trim()) errors.hospitalName = 'Hospital name is required'\n        break\n      case 3:\n        if (!formData.location.trim()) errors.location = 'Location is required'\n        if (!formData.contactPhone.trim()) errors.contactPhone = 'Contact phone is required'\n        break\n    }\n    \n    setValidationErrors(errors)\n    return Object.keys(errors).length === 0\n  }\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, totalSteps))\n    }\n  }\n\n  const handlePrevious = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1))\n  }\n\n  const handleSubmit = async () => {\n    if (!validateStep(currentStep)) return\n\n    setIsSubmitting(true)\n    \n    try {\n      const offlineSync = getOfflineSyncService()\n      const pushService = getPushNotificationService()\n\n      const requestData = {\n        ...formData,\n        requester_id: user?.id,\n        created_at: new Date().toISOString(),\n        status: 'active',\n        emergency_level: formData.urgencyLevel,\n        blood_type: formData.bloodType,\n        units_needed: formData.unitsNeeded,\n        patient_name: formData.patientName,\n        hospital_name: formData.hospitalName,\n        notes: formData.additionalNotes,\n        contact_phone: formData.contactPhone\n      }\n\n      // Create request (works offline)\n      const requestId = await offlineSync.createBloodRequestOffline(requestData)\n\n      // Send notifications if enabled and online\n      if (formData.sendNotifications && isOnline) {\n        try {\n          await pushService.sendLocationBasedNotification(\n            formData.bloodType,\n            { latitude: 0, longitude: 0 }, // Would use actual location\n            10 // 10km radius\n          )\n        } catch (error) {\n          console.error('Failed to send notifications:', error)\n        }\n      }\n\n      toast({\n        title: \"Blood Request Created\",\n        description: isOnline \n          ? \"Your request has been submitted and donors are being notified.\" \n          : \"Your request has been saved and will be submitted when you're back online.\"\n      })\n\n      // Reset form\n      setFormData({\n        bloodType: '',\n        urgencyLevel: 'medium',\n        unitsNeeded: 1,\n        patientName: '',\n        hospitalName: '',\n        location: user?.location || '',\n        contactPhone: user?.phone || '',\n        additionalNotes: '',\n        allowSharing: true,\n        sendNotifications: true\n      })\n      setCurrentStep(1)\n      \n    } catch (error) {\n      console.error('Error creating blood request:', error)\n      toast({\n        title: \"Error\",\n        description: \"Failed to create blood request. Please try again.\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <Heart className=\"h-12 w-12 text-red-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Blood Requirements</h3>\n              <p className=\"text-sm text-muted-foreground\">What type of blood is needed?</p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bloodType\">Blood Type *</Label>\n              <Select value={formData.bloodType} onValueChange={(value) => setFormData(prev => ({ ...prev, bloodType: value }))}>\n                <SelectTrigger className={validationErrors.bloodType ? 'border-red-500' : ''}>\n                  <SelectValue placeholder=\"Select blood type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {BLOOD_TYPES.map(type => (\n                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {validationErrors.bloodType && (\n                <p className=\"text-xs text-red-500\">{validationErrors.bloodType}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Urgency Level *</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {URGENCY_LEVELS.map(level => (\n                  <button\n                    key={level.value}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, urgencyLevel: level.value as any }))}\n                    className={cn(\n                      \"p-3 rounded-lg border text-left transition-all\",\n                      formData.urgencyLevel === level.value \n                        ? \"border-primary bg-primary/10\" \n                        : \"border-gray-200 hover:border-gray-300\"\n                    )}\n                  >\n                    <div className={cn(\"inline-block px-2 py-1 rounded text-xs font-medium mb-1\", level.color)}>\n                      {level.label}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">{level.description}</p>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"unitsNeeded\">Units Needed *</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setFormData(prev => ({ ...prev, unitsNeeded: Math.max(1, prev.unitsNeeded - 1) }))}\n                >\n                  -\n                </Button>\n                <Input \n                  type=\"number\" \n                  value={formData.unitsNeeded} \n                  onChange={(e) => setFormData(prev => ({ ...prev, unitsNeeded: parseInt(e.target.value) || 1 }))}\n                  className=\"text-center\"\n                  min=\"1\"\n                />\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setFormData(prev => ({ ...prev, unitsNeeded: prev.unitsNeeded + 1 }))}\n                >\n                  +\n                </Button>\n              </div>\n            </div>\n          </div>\n        )\n\n      case 2:\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <Users className=\"h-12 w-12 text-blue-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Patient Information</h3>\n              <p className=\"text-sm text-muted-foreground\">Who needs the blood?</p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"patientName\">Patient Name *</Label>\n              <Input \n                id=\"patientName\"\n                value={formData.patientName} \n                onChange={(e) => setFormData(prev => ({ ...prev, patientName: e.target.value }))}\n                placeholder=\"Enter patient name\"\n                className={validationErrors.patientName ? 'border-red-500' : ''}\n              />\n              {validationErrors.patientName && (\n                <p className=\"text-xs text-red-500\">{validationErrors.patientName}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"hospitalName\">Hospital/Medical Facility *</Label>\n              <Input \n                id=\"hospitalName\"\n                value={formData.hospitalName} \n                onChange={(e) => setFormData(prev => ({ ...prev, hospitalName: e.target.value }))}\n                placeholder=\"Enter hospital name\"\n                className={validationErrors.hospitalName ? 'border-red-500' : ''}\n              />\n              {validationErrors.hospitalName && (\n                <p className=\"text-xs text-red-500\">{validationErrors.hospitalName}</p>\n              )}\n            </div>\n          </div>\n        )\n\n      case 3:\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <MapPin className=\"h-12 w-12 text-green-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Contact Information</h3>\n              <p className=\"text-sm text-muted-foreground\">How can donors reach you?</p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\">Location *</Label>\n              <Input \n                id=\"location\"\n                value={formData.location} \n                onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\n                placeholder=\"Enter location or address\"\n                className={validationErrors.location ? 'border-red-500' : ''}\n              />\n              {validationErrors.location && (\n                <p className=\"text-xs text-red-500\">{validationErrors.location}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"contactPhone\">Contact Phone *</Label>\n              <Input \n                id=\"contactPhone\"\n                type=\"tel\"\n                value={formData.contactPhone} \n                onChange={(e) => setFormData(prev => ({ ...prev, contactPhone: e.target.value }))}\n                placeholder=\"Enter phone number\"\n                className={validationErrors.contactPhone ? 'border-red-500' : ''}\n              />\n              {validationErrors.contactPhone && (\n                <p className=\"text-xs text-red-500\">{validationErrors.contactPhone}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"additionalNotes\">Additional Notes</Label>\n              <Textarea \n                id=\"additionalNotes\"\n                value={formData.additionalNotes} \n                onChange={(e) => setFormData(prev => ({ ...prev, additionalNotes: e.target.value }))}\n                placeholder=\"Any additional information for donors\"\n                rows={3}\n              />\n            </div>\n          </div>\n        )\n\n      case 4:\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <Send className=\"h-12 w-12 text-purple-500 mx-auto mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Review & Submit</h3>\n              <p className=\"text-sm text-muted-foreground\">Confirm your request details</p>\n            </div>\n\n            {/* Summary */}\n            <Card className=\"bg-gray-50 dark:bg-gray-800\">\n              <CardContent className=\"p-4 space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Blood Type:</span>\n                  <Badge variant=\"secondary\">{formData.bloodType}</Badge>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Urgency:</span>\n                  <Badge className={URGENCY_LEVELS.find(l => l.value === formData.urgencyLevel)?.color}>\n                    {URGENCY_LEVELS.find(l => l.value === formData.urgencyLevel)?.label}\n                  </Badge>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Units:</span>\n                  <span className=\"text-sm\">{formData.unitsNeeded}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Patient:</span>\n                  <span className=\"text-sm\">{formData.patientName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Hospital:</span>\n                  <span className=\"text-sm\">{formData.hospitalName}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium\">Location:</span>\n                  <span className=\"text-sm\">{formData.location}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Options */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"allowSharing\">Allow sharing request</Label>\n                  <p className=\"text-xs text-muted-foreground\">Let others share your request on social media</p>\n                </div>\n                <Switch \n                  id=\"allowSharing\"\n                  checked={formData.allowSharing} \n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, allowSharing: checked }))}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"sendNotifications\">Send notifications to donors</Label>\n                  <p className=\"text-xs text-muted-foreground\">Notify matching donors immediately</p>\n                </div>\n                <Switch \n                  id=\"sendNotifications\"\n                  checked={formData.sendNotifications} \n                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, sendNotifications: checked }))}\n                />\n              </div>\n            </div>\n\n            {/* Status */}\n            <div className=\"flex items-center justify-center space-x-2 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n              {isOnline ? (\n                <>\n                  <Wifi className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-sm text-green-700 dark:text-green-300\">Online - Request will be submitted immediately</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"h-4 w-4 text-orange-500\" />\n                  <span className=\"text-sm text-orange-700 dark:text-orange-300\">Offline - Request will be queued until online</span>\n                </>\n              )}\n            </div>\n          </div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-red-50 to-pink-50 dark:from-gray-900 dark:to-gray-800 p-4 pb-24\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-center mb-2\">Create Blood Request</h1>\n        <div className=\"flex items-center justify-center space-x-2 text-sm text-muted-foreground\">\n          <span>Step {currentStep} of {totalSteps}</span>\n          <Separator orientation=\"vertical\" className=\"h-4\" />\n          <span>{Math.round(progress)}% Complete</span>\n        </div>\n        <Progress value={progress} className=\"mt-2\" />\n      </div>\n\n      {/* Form */}\n      <Card>\n        <CardContent className=\"p-6\">\n          {renderStep()}\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"fixed bottom-20 left-0 right-0 p-4 bg-background border-t\">\n        <div className=\"flex justify-between space-x-3\">\n          <Button \n            variant=\"outline\" \n            onClick={handlePrevious}\n            disabled={currentStep === 1}\n            className=\"flex-1\"\n          >\n            Previous\n          </Button>\n          \n          {currentStep < totalSteps ? (\n            <Button onClick={handleNext} className=\"flex-1\">\n              Next\n            </Button>\n          ) : (\n            <Button \n              onClick={handleSubmit} \n              disabled={isSubmitting}\n              className=\"flex-1\"\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Submitting...\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Submit Request\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}